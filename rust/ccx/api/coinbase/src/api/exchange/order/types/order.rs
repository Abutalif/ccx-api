use crate::api::exchange::prelude::*;
use crate::api::exchange::OrderSide;
use crate::api::exchange::OrderStatus;
use crate::api::exchange::OrderStop;
use crate::api::exchange::OrderTimeInForce;
use crate::api::exchange::OrderType;
use crate::dt_coinbase::DtCoinbase;

#[derive(Debug, Serialize, Deserialize, Clone, Eq, PartialEq)]
pub struct Order {
    /// The unique order ID generated by Coinbase.
    pub id: Uuid,
    /// Price per unit of base currency
    pub price: Option<Decimal>,
    /// Amount of base currency to buy/sell
    pub size: Option<Decimal>,
    /// Book the order was placed on.
    pub product_id: Atom,
    /// profile_id that placed the order.
    pub profile_id: Option<Uuid>,
    ///
    pub side: OrderSide,
    /// Amount of quote currency to spend (for market orders).
    pub funds: Option<Decimal>,
    /// Funds with fees.
    pub specified_funds: Option<Decimal>,
    /// .
    pub r#type: OrderType,
    /// .
    pub time_in_force: OrderTimeInForce,
    /// Timestamp at which order expires.
    pub expire_time: Option<DtCoinbase>,
    /// If true, forces order to be `maker` only.
    pub post_only: bool,
    /// Timestamp at which order was placed.
    pub created_at: DtCoinbase,
    /// Timestamp at which order was done.
    pub done_at: Option<DtCoinbase>,
    /// Reason order was done (filled, rejected, or otherwise).
    pub done_reason: Option<Atom>,
    /// Reason order was rejected by engine.
    pub reject_reason: Option<Atom>,
    /// Fees paid on current filled amount.
    pub fill_fees: Decimal,
    /// Amount (in base currency) of the order that has been filled.
    pub filled_size: Decimal,
    ///
    pub executed_value: Decimal,
    ///
    pub status: OrderStatus,
    /// true if funds have been exchanged and settled.
    pub settled: bool,
    ///
    pub stop: Option<OrderStop>,
    /// price (in quote currency) at which to execute the order.
    pub stop_price: Option<Decimal>,
    ///
    pub funding_amount: Option<Decimal>,
    /// A client-generated order ID used for reference purposes (note: order will be rejected
    /// if this ID is not unique among all currently active orders).
    #[serde(rename = "client_oid")]
    pub client_order_id: Option<Uuid>,
    /// Market type where order was traded.
    pub market_type: Option<Atom>,
}
